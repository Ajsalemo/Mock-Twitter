(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('apollo-link'), require('graphql/language/printer')) :
	typeof define === 'function' && define.amd ? define(['exports', 'apollo-link', 'graphql/language/printer'], factory) :
	(factory((global.httpLink = {}),global.apolloLink,global.graphql_language_printer));
}(this, (function (exports,apolloLink,graphql_language_printer) { 'use strict';

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var parseAndCheckResponse = function (response) {
    return response
        .json()
        .then(function (result) {
        if (response.status >= 300)
            throw new Error("Response not successful: Received status code " + response.status);
        return result;
    })
        .catch(function (e) {
        var httpError = new Error("Network request failed with status " + response.status + " - \"" + response.statusText + "\"");
        httpError.response = response;
        httpError.parseError = e;
        httpError.statusCode = response.status;
        throw httpError;
    });
};
var checkFetcher = function (fetcher) {
    if (fetcher.use &&
        fetcher.useAfter &&
        fetcher.batchUse &&
        fetcher.batchUseAfter) {
        throw new Error("\n      It looks like you're using apollo-fetch! Apollo Link now uses the native fetch\n      implementation, so apollo-fetch is not needed. If you want to use your existing\n      apollo-fetch middleware, please check this guide to upgrade:\n        https://github.com/apollographql/apollo-link/blob/master/docs/implementation.md\n    ");
    }
};
var warnIfNoFetch = function (fetcher) {
    if (!fetcher && typeof fetch === 'undefined') {
        var library = 'unfetch';
        if (typeof window === 'undefined')
            library = 'node-fetch';
        throw new Error("fetch is not found globally and no fetcher passed, to fix pass a fetch for\n      your environment like https://www.npmjs.com/package/" + library + ".\n\n      For example:\n        import fetch from '" + library + "';\n        import { createHttpLink } from 'apollo-link-http';\n\n        const link = createFetchLink({ uri: '/graphql', fetch: fetch });\n      ");
    }
};
var createSignalIfSupported = function () {
    if (typeof AbortController === 'undefined')
        return { controller: false, signal: false };
    var controller = new AbortController();
    var signal = controller.signal;
    return { controller: controller, signal: signal };
};
var createHttpLink = function (_a) {
    var _b = _a === void 0 ? {} : _a, uri = _b.uri, fetcher = _b.fetch, includeExtensions = _b.includeExtensions;
    warnIfNoFetch(fetcher);
    if (fetcher)
        checkFetcher(fetcher);
    if (!fetcher)
        fetcher = fetch;
    if (!uri)
        uri = '/graphql';
    return new apolloLink.ApolloLink(function (operation) {
        return new apolloLink.Observable(function (observer) {
            var _a = operation.getContext(), headers = _a.headers, credentials = _a.credentials, fetcherOptions = _a.fetcherOptions;
            var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;
            var body = {
                operationName: operationName,
                variables: variables,
                query: graphql_language_printer.print(query),
            };
            if (includeExtensions)
                body.extensions = extensions;
            var serializedBody;
            try {
                serializedBody = JSON.stringify(body);
            }
            catch (e) {
                var parseError = new Error("Network request failed. Payload is not serializable: " + e.message);
                parseError.parseError = e;
                throw parseError;
            }
            var fetchOptions = __assign({ method: 'POST' }, fetcherOptions, { headers: {
                    accept: '*/*',
                    'content-type': 'application/json',
                }, body: serializedBody });
            if (credentials)
                fetchOptions.credentials = credentials;
            if (headers)
                fetchOptions.headers = __assign({}, fetchOptions.headers, headers);
            var _b = createSignalIfSupported(), controller = _b.controller, signal = _b.signal;
            if (controller)
                fetchOptions.signal = signal;
            fetcher(uri, fetchOptions)
                .then(parseAndCheckResponse)
                .then(function (result) {
                observer.next(result);
                observer.complete();
                return result;
            })
                .catch(function (err) {
                if (err.name === 'AbortError')
                    return;
                observer.error(err);
            });
            return function () {
                if (controller)
                    controller.abort();
            };
        });
    });
};
var HttpLink = (function (_super) {
    __extends(HttpLink, _super);
    function HttpLink(opts) {
        var _this = _super.call(this) || this;
        _this.requester = createHttpLink(opts).request;
        return _this;
    }
    HttpLink.prototype.request = function (op) {
        return this.requester(op);
    };
    return HttpLink;
}(apolloLink.ApolloLink));

exports.createHttpLink = createHttpLink;
exports.HttpLink = HttpLink;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=bundle.umd.js.map
